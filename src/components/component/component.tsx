/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/3N2I58XbOpq
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Tenor_Sans } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

tenor_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent } from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Textarea } from "@/components/ui/textarea"

export function Component() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState([])
  const [inputValue, setInputValue] = useState("")
  const [users, setUsers] = useState([
    {
      name: "John Doe",
      email: "john@example.com",
      avatar: "/placeholder-user.jpg",
      role: "Developer",
    },
    {
      name: "Jane Smith",
      email: "jane@example.com",
      avatar: "/placeholder-user.jpg",
      role: "Designer",
    },
    {
      name: "Bob Johnson",
      email: "bob@example.com",
      avatar: "/placeholder-user.jpg",
      role: "Project Manager",
    },
  ])
  useEffect(() => {
    const socket = new WebSocket("wss://chat-wss-wispy-frost-3467.fly.dev/")
    socket.onmessage = (event) => {
      setMessages((prevMessages) => [...prevMessages, { sender: "other", text: event.data }])
    }
    return () => {
      socket.close()
    }
  }, [])
  const handleSendMessage = () => {
    if (inputValue.trim() !== "") {
      const socket = new WebSocket("wss://chat-wss-wispy-frost-3467.fly.dev/")
      socket.send(inputValue)
      setMessages((prevMessages) => [...prevMessages, { sender: "you", text: inputValue }])
      setInputValue("")
    }
  }
  return (
    <div className="w-full h-screen flex flex-col">
      <div className="flex-1 bg-[url('/placeholder.svg?height=600&width=800')] bg-cover bg-center">
        <div className="h-full w-full bg-black/50 flex items-center justify-center">
          <div className="text-center text-white space-y-4">
            <h1 className="text-4xl font-bold">Evento Incrível</h1>
            <p className="text-lg">Não perca essa oportunidade!</p>
            <Button>Comprar Ingresso</Button>
          </div>
        </div>
      </div>
      <div className="bg-background border-t border-border p-4 flex justify-center">
        <Button onClick={() => setIsOpen(true)} className="flex items-center gap-2">
          <MessageCircleIcon className="w-5 h-5" />
          Abrir Chat
        </Button>
      </div>
      {isOpen && (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
          <DialogContent className="w-full max-w-md h-[80vh] bg-background rounded-t-2xl shadow-lg border-t border-border">
            <div className="flex flex-col h-full">
              <div className="flex-1 overflow-auto p-4 space-y-4">
                <ScrollArea className="h-full">
                  {messages.map((message, index) => (
                    <div
                      key={index}
                      className={`flex items-start gap-2 ${message.sender === "you" ? "justify-end" : ""}`}
                    >
                      <Avatar className="w-8 h-8 border">
                        <AvatarImage src="/placeholder-user.jpg" alt="Avatar" />
                        <AvatarFallback>{message.sender === "you" ? "YO" : "OT"}</AvatarFallback>
                      </Avatar>
                      <div
                        className={`px-3 py-2 rounded-lg ${
                          message.sender === "you" ? "bg-primary text-primary-foreground" : "bg-muted"
                        }`}
                      >
                        <p>{message.text}</p>
                      </div>
                    </div>
                  ))}
                </ScrollArea>
              </div>
              <div className="border-t border-border p-2 flex items-center gap-2">
                <Textarea
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="Digite sua mensagem..."
                  className="flex-1 resize-none"
                />
                <Button onClick={handleSendMessage}>Enviar</Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
      <div className="bg-background border-t border-border p-4 flex-col md:flex-row flex justify-between items-center">
        <h2 className="text-2xl font-bold mb-4 md:mb-0">Profissionais Autenticados</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {users.map((user, index) => (
            <div key={index} className="bg-card rounded-lg shadow-md p-4 flex items-center gap-4">
              <Avatar className="w-12 h-12 border">
                <AvatarImage src="/placeholder-user.jpg" alt={user.name} />
                <AvatarFallback>{user.name.charAt(0).toUpperCase()}</AvatarFallback>
              </Avatar>
              <div className="flex-1">
                <h3 className="text-lg font-medium">{user.name}</h3>
                <p className="text-sm text-muted-foreground">{user.email}</p>
                <p className="text-sm text-muted-foreground">{user.role}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

function MessageCircleIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z" />
    </svg>
  )
}
